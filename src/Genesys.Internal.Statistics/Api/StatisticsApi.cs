/* 
 * Statistics Service
 *
 * Statistics Service
 *
 * OpenAPI spec version: 9.0.000.00.392
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Statistics.Client;
using Genesys.Internal.Statistics.Model;

namespace Genesys.Internal.Statistics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Open a subscription.
        /// </summary>
        /// <remarks>
        /// Open a subscription for the specified set of statistics.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        StatisticDataResponse CreateSubscription (Object statistics, string verbose = null);

        /// <summary>
        /// Open a subscription.
        /// </summary>
        /// <remarks>
        /// Open a subscription for the specified set of statistics.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        ApiResponse<StatisticDataResponse> CreateSubscriptionWithHttpInfo (Object statistics, string verbose = null);
        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteSubscription (string id);

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Get the value of a single statistic.
        /// </summary>
        /// <remarks>
        /// Get the current value of a statistic from Stat Server.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>PeekedStatisticResponse</returns>
        PeekedStatisticResponse GetStatValue (string statisticName, string objectId, string objectType);

        /// <summary>
        /// Get the value of a single statistic.
        /// </summary>
        /// <remarks>
        /// Get the current value of a statistic from Stat Server.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>ApiResponse of PeekedStatisticResponse</returns>
        ApiResponse<PeekedStatisticResponse> GetStatValueWithHttpInfo (string statisticName, string objectId, string objectType);
        /// <summary>
        /// Get the values of a set of statistics.
        /// </summary>
        /// <remarks>
        /// Get the current value of predefined statistics from Stat Server without a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>PeekedStatisticsResponse</returns>
        PeekedStatisticsResponse GetStatValues (Object statistics);

        /// <summary>
        /// Get the values of a set of statistics.
        /// </summary>
        /// <remarks>
        /// Get the current value of predefined statistics from Stat Server without a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>ApiResponse of PeekedStatisticsResponse</returns>
        ApiResponse<PeekedStatisticsResponse> GetStatValuesWithHttpInfo (Object statistics);
        /// <summary>
        /// Get the values of statistics in a subscription.
        /// </summary>
        /// <remarks>
        /// Get the values of a set of statistics that was opened with a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        StatisticDataResponse PeekSubscriptionStats (string id, string statisticIds = null, string verbose = null);

        /// <summary>
        /// Get the values of statistics in a subscription.
        /// </summary>
        /// <remarks>
        /// Get the values of a set of statistics that was opened with a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        ApiResponse<StatisticDataResponse> PeekSubscriptionStatsWithHttpInfo (string id, string statisticIds = null, string verbose = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Open a subscription.
        /// </summary>
        /// <remarks>
        /// Open a subscription for the specified set of statistics.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        System.Threading.Tasks.Task<StatisticDataResponse> CreateSubscriptionAsync (Object statistics, string verbose = null);

        /// <summary>
        /// Open a subscription.
        /// </summary>
        /// <remarks>
        /// Open a subscription for the specified set of statistics.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> CreateSubscriptionAsyncWithHttpInfo (Object statistics, string verbose = null);
        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteSubscriptionAsync (string id);

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get the value of a single statistic.
        /// </summary>
        /// <remarks>
        /// Get the current value of a statistic from Stat Server.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>Task of PeekedStatisticResponse</returns>
        System.Threading.Tasks.Task<PeekedStatisticResponse> GetStatValueAsync (string statisticName, string objectId, string objectType);

        /// <summary>
        /// Get the value of a single statistic.
        /// </summary>
        /// <remarks>
        /// Get the current value of a statistic from Stat Server.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>Task of ApiResponse (PeekedStatisticResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeekedStatisticResponse>> GetStatValueAsyncWithHttpInfo (string statisticName, string objectId, string objectType);
        /// <summary>
        /// Get the values of a set of statistics.
        /// </summary>
        /// <remarks>
        /// Get the current value of predefined statistics from Stat Server without a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>Task of PeekedStatisticsResponse</returns>
        System.Threading.Tasks.Task<PeekedStatisticsResponse> GetStatValuesAsync (Object statistics);

        /// <summary>
        /// Get the values of a set of statistics.
        /// </summary>
        /// <remarks>
        /// Get the current value of predefined statistics from Stat Server without a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>Task of ApiResponse (PeekedStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeekedStatisticsResponse>> GetStatValuesAsyncWithHttpInfo (Object statistics);
        /// <summary>
        /// Get the values of statistics in a subscription.
        /// </summary>
        /// <remarks>
        /// Get the values of a set of statistics that was opened with a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        System.Threading.Tasks.Task<StatisticDataResponse> PeekSubscriptionStatsAsync (string id, string statisticIds = null, string verbose = null);

        /// <summary>
        /// Get the values of statistics in a subscription.
        /// </summary>
        /// <remarks>
        /// Get the values of a set of statistics that was opened with a subscription.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> PeekSubscriptionStatsAsyncWithHttpInfo (string id, string statisticIds = null, string verbose = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private Genesys.Internal.Statistics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Statistics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Open a subscription. Open a subscription for the specified set of statistics.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        public StatisticDataResponse CreateSubscription (Object statistics, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = CreateSubscriptionWithHttpInfo(statistics, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open a subscription. Open a subscription for the specified set of statistics.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        public ApiResponse< StatisticDataResponse > CreateSubscriptionWithHttpInfo (Object statistics, string verbose = null)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->CreateSubscription");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Open a subscription. Open a subscription for the specified set of statistics.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        public async System.Threading.Tasks.Task<StatisticDataResponse> CreateSubscriptionAsync (Object statistics, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = await CreateSubscriptionAsyncWithHttpInfo(statistics, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open a subscription. Open a subscription for the specified set of statistics.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of the statistics to be monitored.</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> CreateSubscriptionAsyncWithHttpInfo (Object statistics, string verbose = null)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->CreateSubscription");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Delete a subscription. Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteSubscription (string id)
        {
             ApiResponse<ApiResponse> localVarResponse = DeleteSubscriptionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a subscription. Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > DeleteSubscriptionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->DeleteSubscription");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Delete a subscription. Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteSubscriptionAsync (string id)
        {
             ApiResponse<ApiResponse> localVarResponse = await DeleteSubscriptionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a subscription. Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription to delete.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteSubscriptionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->DeleteSubscription");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Get the value of a single statistic. Get the current value of a statistic from Stat Server.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>PeekedStatisticResponse</returns>
        public PeekedStatisticResponse GetStatValue (string statisticName, string objectId, string objectType)
        {
             ApiResponse<PeekedStatisticResponse> localVarResponse = GetStatValueWithHttpInfo(statisticName, objectId, objectType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the value of a single statistic. Get the current value of a statistic from Stat Server.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>ApiResponse of PeekedStatisticResponse</returns>
        public ApiResponse< PeekedStatisticResponse > GetStatValueWithHttpInfo (string statisticName, string objectId, string objectType)
        {
            // verify the required parameter 'statisticName' is set
            if (statisticName == null)
                throw new ApiException(400, "Missing required parameter 'statisticName' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling StatisticsApi->GetStatValue");

            var localVarPath = "/statistic-values/{statisticName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statisticName != null) localVarPathParams.Add("statisticName", Configuration.ApiClient.ParameterToString(statisticName)); // path parameter
            if (objectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectId", objectId)); // query parameter
            if (objectType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectType", objectType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticResponse)));
        }

        /// <summary>
        /// Get the value of a single statistic. Get the current value of a statistic from Stat Server.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>Task of PeekedStatisticResponse</returns>
        public async System.Threading.Tasks.Task<PeekedStatisticResponse> GetStatValueAsync (string statisticName, string objectId, string objectType)
        {
             ApiResponse<PeekedStatisticResponse> localVarResponse = await GetStatValueAsyncWithHttpInfo(statisticName, objectId, objectType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the value of a single statistic. Get the current value of a statistic from Stat Server.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">The name of the pre-configured statistic to retrieve.</param>
        /// <param name="objectId">The type of object the statistic is for.</param>
        /// <param name="objectType">The ID of the object.</param>
        /// <returns>Task of ApiResponse (PeekedStatisticResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeekedStatisticResponse>> GetStatValueAsyncWithHttpInfo (string statisticName, string objectId, string objectType)
        {
            // verify the required parameter 'statisticName' is set
            if (statisticName == null)
                throw new ApiException(400, "Missing required parameter 'statisticName' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling StatisticsApi->GetStatValue");

            var localVarPath = "/statistic-values/{statisticName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statisticName != null) localVarPathParams.Add("statisticName", Configuration.ApiClient.ParameterToString(statisticName)); // path parameter
            if (objectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectId", objectId)); // query parameter
            if (objectType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectType", objectType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticResponse)));
        }

        /// <summary>
        /// Get the values of a set of statistics. Get the current value of predefined statistics from Stat Server without a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>PeekedStatisticsResponse</returns>
        public PeekedStatisticsResponse GetStatValues (Object statistics)
        {
             ApiResponse<PeekedStatisticsResponse> localVarResponse = GetStatValuesWithHttpInfo(statistics);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the values of a set of statistics. Get the current value of predefined statistics from Stat Server without a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>ApiResponse of PeekedStatisticsResponse</returns>
        public ApiResponse< PeekedStatisticsResponse > GetStatValuesWithHttpInfo (Object statistics)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->GetStatValues");

            var localVarPath = "/operations/get-statistic-ex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticsResponse)));
        }

        /// <summary>
        /// Get the values of a set of statistics. Get the current value of predefined statistics from Stat Server without a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>Task of PeekedStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<PeekedStatisticsResponse> GetStatValuesAsync (Object statistics)
        {
             ApiResponse<PeekedStatisticsResponse> localVarResponse = await GetStatValuesAsyncWithHttpInfo(statistics);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the values of a set of statistics. Get the current value of predefined statistics from Stat Server without a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">The set of statistics you want to get the values for from Stat Server.</param>
        /// <returns>Task of ApiResponse (PeekedStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeekedStatisticsResponse>> GetStatValuesAsyncWithHttpInfo (Object statistics)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->GetStatValues");

            var localVarPath = "/operations/get-statistic-ex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticsResponse)));
        }

        /// <summary>
        /// Get the values of statistics in a subscription. Get the values of a set of statistics that was opened with a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        public StatisticDataResponse PeekSubscriptionStats (string id, string statisticIds = null, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = PeekSubscriptionStatsWithHttpInfo(id, statisticIds, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the values of statistics in a subscription. Get the values of a set of statistics that was opened with a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        public ApiResponse< StatisticDataResponse > PeekSubscriptionStatsWithHttpInfo (string id, string statisticIds = null, string verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->PeekSubscriptionStats");

            var localVarPath = "/subscriptions/{id}/statistic-values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statisticIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticIds", statisticIds)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeekSubscriptionStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Get the values of statistics in a subscription. Get the values of a set of statistics that was opened with a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        public async System.Threading.Tasks.Task<StatisticDataResponse> PeekSubscriptionStatsAsync (string id, string statisticIds = null, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = await PeekSubscriptionStatsAsyncWithHttpInfo(id, statisticIds, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the values of statistics in a subscription. Get the values of a set of statistics that was opened with a subscription.
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the subscription.</param>
        /// <param name="statisticIds">A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)</param>
        /// <param name="verbose">Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: OFF and INFO. (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> PeekSubscriptionStatsAsyncWithHttpInfo (string id, string statisticIds = null, string verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->PeekSubscriptionStats");

            var localVarPath = "/subscriptions/{id}/statistic-values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statisticIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticIds", statisticIds)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeekSubscriptionStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

    }
}
