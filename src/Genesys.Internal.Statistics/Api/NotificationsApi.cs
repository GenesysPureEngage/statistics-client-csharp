/* 
 * Statistics Service
 *
 * Statistics Service
 *
 * OpenAPI spec version: 9.0.000.00.402
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Statistics.Client;

namespace Genesys.Internal.Statistics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CometD connect
        /// </summary>
        /// <remarks>
        /// CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Connect ();

        /// <summary>
        /// CometD connect
        /// </summary>
        /// <remarks>
        /// CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectWithHttpInfo ();
        /// <summary>
        /// CometD disconnect
        /// </summary>
        /// <remarks>
        /// CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Disconnect ();

        /// <summary>
        /// CometD disconnect
        /// </summary>
        /// <remarks>
        /// CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisconnectWithHttpInfo ();
        /// <summary>
        /// CometD handshake
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Handshake ();

        /// <summary>
        /// CometD handshake
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HandshakeWithHttpInfo ();
        /// <summary>
        /// CometD endpoint
        /// </summary>
        /// <remarks>
        /// CometD endpoint
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Notifications ();

        /// <summary>
        /// CometD endpoint
        /// </summary>
        /// <remarks>
        /// CometD endpoint
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsWithHttpInfo ();
        /// <summary>
        /// CometD subscribe to channel
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Subscribe ();

        /// <summary>
        /// CometD subscribe to channel
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscribeWithHttpInfo ();
        /// <summary>
        /// CometD unsubscribe
        /// </summary>
        /// <remarks>
        /// unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Unsubscribe ();

        /// <summary>
        /// CometD unsubscribe
        /// </summary>
        /// <remarks>
        /// unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnsubscribeWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CometD connect
        /// </summary>
        /// <remarks>
        /// CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectAsync ();

        /// <summary>
        /// CometD connect
        /// </summary>
        /// <remarks>
        /// CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectAsyncWithHttpInfo ();
        /// <summary>
        /// CometD disconnect
        /// </summary>
        /// <remarks>
        /// CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisconnectAsync ();

        /// <summary>
        /// CometD disconnect
        /// </summary>
        /// <remarks>
        /// CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisconnectAsyncWithHttpInfo ();
        /// <summary>
        /// CometD handshake
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HandshakeAsync ();

        /// <summary>
        /// CometD handshake
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HandshakeAsyncWithHttpInfo ();
        /// <summary>
        /// CometD endpoint
        /// </summary>
        /// <remarks>
        /// CometD endpoint
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsAsync ();

        /// <summary>
        /// CometD endpoint
        /// </summary>
        /// <remarks>
        /// CometD endpoint
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// CometD subscribe to channel
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscribeAsync ();

        /// <summary>
        /// CometD subscribe to channel
        /// </summary>
        /// <remarks>
        /// CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscribeAsyncWithHttpInfo ();
        /// <summary>
        /// CometD unsubscribe
        /// </summary>
        /// <remarks>
        /// unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnsubscribeAsync ();

        /// <summary>
        /// CometD unsubscribe
        /// </summary>
        /// <remarks>
        /// unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </remarks>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnsubscribeAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationsApi : INotificationsApi
    {
        private Genesys.Internal.Statistics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Statistics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// CometD connect CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Connect ()
        {
             ConnectWithHttpInfo();
        }

        /// <summary>
        /// CometD connect CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectWithHttpInfo ()
        {

            var localVarPath = "/notifications/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Connect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD connect CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectAsync ()
        {
             await ConnectAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD connect CometD connect, see https://docs.cometd.org/current/reference/#_bayeux_meta_connect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Connect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD disconnect CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Disconnect ()
        {
             DisconnectWithHttpInfo();
        }

        /// <summary>
        /// CometD disconnect CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisconnectWithHttpInfo ()
        {

            var localVarPath = "/notifications/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Disconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD disconnect CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisconnectAsync ()
        {
             await DisconnectAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD disconnect CometD disconnect, see https://docs.cometd.org/current/reference/#_bayeux_meta_disconnect
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisconnectAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Disconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD handshake CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Handshake ()
        {
             HandshakeWithHttpInfo();
        }

        /// <summary>
        /// CometD handshake CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HandshakeWithHttpInfo ()
        {

            var localVarPath = "/notifications/handshake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Handshake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD handshake CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HandshakeAsync ()
        {
             await HandshakeAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD handshake CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_handshake
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HandshakeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/handshake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Handshake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD endpoint CometD endpoint
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Notifications ()
        {
             NotificationsWithHttpInfo();
        }

        /// <summary>
        /// CometD endpoint CometD endpoint
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsWithHttpInfo ()
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD endpoint CometD endpoint
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsAsync ()
        {
             await NotificationsAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD endpoint CometD endpoint
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD subscribe to channel CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Subscribe ()
        {
             SubscribeWithHttpInfo();
        }

        /// <summary>
        /// CometD subscribe to channel CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubscribeWithHttpInfo ()
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Subscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD subscribe to channel CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscribeAsync ()
        {
             await SubscribeAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD subscribe to channel CometD handshake, see https://docs.cometd.org/current/reference/#_bayeux_meta_subscribe  Current channels:  &lt;b&gt;/statistics/v3/service&lt;/b&gt; - information about service state  &lt;b&gt;/statistics/v3/updates&lt;/b&gt; - statistics updates  
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscribeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Subscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD unsubscribe unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Unsubscribe ()
        {
             UnsubscribeWithHttpInfo();
        }

        /// <summary>
        /// CometD unsubscribe unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnsubscribeWithHttpInfo ()
        {

            var localVarPath = "/notifications/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// CometD unsubscribe unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnsubscribeAsync ()
        {
             await UnsubscribeAsyncWithHttpInfo();

        }

        /// <summary>
        /// CometD unsubscribe unscubscribe from channels, see https://docs.cometd.org/current/reference/#_bayeux_meta_unsubscribe
        /// </summary>
        /// <exception cref="Genesys.Internal.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnsubscribeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
