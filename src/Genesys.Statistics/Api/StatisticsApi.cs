/* 
 * Statistics Service
 *
 * Statistics Service
 *
 * OpenAPI spec version: 9.0.000.00.353
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Statistics.Client;
using Genesys.Statistics.Model;

namespace Genesys.Statistics.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Opens the subscription for the specified set of statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        StatisticDataResponse CreateSubscriptionUsingPOST (Object statistics, string verbose = null);

        /// <summary>
        /// Opens the subscription for the specified set of statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        ApiResponse<StatisticDataResponse> CreateSubscriptionUsingPOSTWithHttpInfo (Object statistics, string verbose = null);
        /// <summary>
        /// Deletes the specified statistic subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteSubscription (string id);

        /// <summary>
        /// Deletes the specified statistic subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteSubscriptionWithHttpInfo (string id);
        /// <summary>
        /// Peeks the value of specified statistic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>PeekedStatisticResponse</returns>
        PeekedStatisticResponse GetStatValue (string statisticName, string objectId, string objectType);

        /// <summary>
        /// Peeks the value of specified statistic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>ApiResponse of PeekedStatisticResponse</returns>
        ApiResponse<PeekedStatisticResponse> GetStatValueWithHttpInfo (string statisticName, string objectId, string objectType);
        /// <summary>
        /// Peeks the values of specified statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>PeekedStatisticsResponse</returns>
        PeekedStatisticsResponse GetStatValues (Object statistics);

        /// <summary>
        /// Peeks the values of specified statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>ApiResponse of PeekedStatisticsResponse</returns>
        ApiResponse<PeekedStatisticsResponse> GetStatValuesWithHttpInfo (Object statistics);
        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        StatisticDataResponse PeekSubscriptionStats (string id, string statisticIds = null, string verbose = null);

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        ApiResponse<StatisticDataResponse> PeekSubscriptionStatsWithHttpInfo (string id, string statisticIds = null, string verbose = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Opens the subscription for the specified set of statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        System.Threading.Tasks.Task<StatisticDataResponse> CreateSubscriptionUsingPOSTAsync (Object statistics, string verbose = null);

        /// <summary>
        /// Opens the subscription for the specified set of statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> CreateSubscriptionUsingPOSTAsyncWithHttpInfo (Object statistics, string verbose = null);
        /// <summary>
        /// Deletes the specified statistic subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteSubscriptionAsync (string id);

        /// <summary>
        /// Deletes the specified statistic subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteSubscriptionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Peeks the value of specified statistic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>Task of PeekedStatisticResponse</returns>
        System.Threading.Tasks.Task<PeekedStatisticResponse> GetStatValueAsync (string statisticName, string objectId, string objectType);

        /// <summary>
        /// Peeks the value of specified statistic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>Task of ApiResponse (PeekedStatisticResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeekedStatisticResponse>> GetStatValueAsyncWithHttpInfo (string statisticName, string objectId, string objectType);
        /// <summary>
        /// Peeks the values of specified statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>Task of PeekedStatisticsResponse</returns>
        System.Threading.Tasks.Task<PeekedStatisticsResponse> GetStatValuesAsync (Object statistics);

        /// <summary>
        /// Peeks the values of specified statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>Task of ApiResponse (PeekedStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeekedStatisticsResponse>> GetStatValuesAsyncWithHttpInfo (Object statistics);
        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        System.Threading.Tasks.Task<StatisticDataResponse> PeekSubscriptionStatsAsync (string id, string statisticIds = null, string verbose = null);

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> PeekSubscriptionStatsAsyncWithHttpInfo (string id, string statisticIds = null, string verbose = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private Genesys.Statistics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Statistics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Statistics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Opens the subscription for the specified set of statistics. 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        public StatisticDataResponse CreateSubscriptionUsingPOST (Object statistics, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = CreateSubscriptionUsingPOSTWithHttpInfo(statistics, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Opens the subscription for the specified set of statistics. 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        public ApiResponse< StatisticDataResponse > CreateSubscriptionUsingPOSTWithHttpInfo (Object statistics, string verbose = null)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->CreateSubscriptionUsingPOST");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Opens the subscription for the specified set of statistics. 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        public async System.Threading.Tasks.Task<StatisticDataResponse> CreateSubscriptionUsingPOSTAsync (Object statistics, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = await CreateSubscriptionUsingPOSTAsyncWithHttpInfo(statistics, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Opens the subscription for the specified set of statistics. 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">Definitions of statistics to be monitored</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> CreateSubscriptionUsingPOSTAsyncWithHttpInfo (Object statistics, string verbose = null)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->CreateSubscriptionUsingPOST");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Deletes the specified statistic subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteSubscription (string id)
        {
             ApiResponse<ApiResponse> localVarResponse = DeleteSubscriptionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified statistic subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > DeleteSubscriptionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->DeleteSubscription");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Deletes the specified statistic subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteSubscriptionAsync (string id)
        {
             ApiResponse<ApiResponse> localVarResponse = await DeleteSubscriptionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified statistic subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to delete</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteSubscriptionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->DeleteSubscription");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Peeks the value of specified statistic 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>PeekedStatisticResponse</returns>
        public PeekedStatisticResponse GetStatValue (string statisticName, string objectId, string objectType)
        {
             ApiResponse<PeekedStatisticResponse> localVarResponse = GetStatValueWithHttpInfo(statisticName, objectId, objectType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Peeks the value of specified statistic 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>ApiResponse of PeekedStatisticResponse</returns>
        public ApiResponse< PeekedStatisticResponse > GetStatValueWithHttpInfo (string statisticName, string objectId, string objectType)
        {
            // verify the required parameter 'statisticName' is set
            if (statisticName == null)
                throw new ApiException(400, "Missing required parameter 'statisticName' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling StatisticsApi->GetStatValue");

            var localVarPath = "/statistic-values/{statisticName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statisticName != null) localVarPathParams.Add("statisticName", Configuration.ApiClient.ParameterToString(statisticName)); // path parameter
            if (objectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectId", objectId)); // query parameter
            if (objectType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectType", objectType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticResponse)));
        }

        /// <summary>
        /// Peeks the value of specified statistic 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>Task of PeekedStatisticResponse</returns>
        public async System.Threading.Tasks.Task<PeekedStatisticResponse> GetStatValueAsync (string statisticName, string objectId, string objectType)
        {
             ApiResponse<PeekedStatisticResponse> localVarResponse = await GetStatValueAsyncWithHttpInfo(statisticName, objectId, objectType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Peeks the value of specified statistic 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticName">name of statistic to be peeked</param>
        /// <param name="objectId">id of object for which statistic to be peeked</param>
        /// <param name="objectType">type of object for which statistic to be peeked</param>
        /// <returns>Task of ApiResponse (PeekedStatisticResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeekedStatisticResponse>> GetStatValueAsyncWithHttpInfo (string statisticName, string objectId, string objectType)
        {
            // verify the required parameter 'statisticName' is set
            if (statisticName == null)
                throw new ApiException(400, "Missing required parameter 'statisticName' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new ApiException(400, "Missing required parameter 'objectId' when calling StatisticsApi->GetStatValue");
            // verify the required parameter 'objectType' is set
            if (objectType == null)
                throw new ApiException(400, "Missing required parameter 'objectType' when calling StatisticsApi->GetStatValue");

            var localVarPath = "/statistic-values/{statisticName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statisticName != null) localVarPathParams.Add("statisticName", Configuration.ApiClient.ParameterToString(statisticName)); // path parameter
            if (objectId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectId", objectId)); // query parameter
            if (objectType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "objectType", objectType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticResponse)));
        }

        /// <summary>
        /// Peeks the values of specified statistics 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>PeekedStatisticsResponse</returns>
        public PeekedStatisticsResponse GetStatValues (Object statistics)
        {
             ApiResponse<PeekedStatisticsResponse> localVarResponse = GetStatValuesWithHttpInfo(statistics);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Peeks the values of specified statistics 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>ApiResponse of PeekedStatisticsResponse</returns>
        public ApiResponse< PeekedStatisticsResponse > GetStatValuesWithHttpInfo (Object statistics)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->GetStatValues");

            var localVarPath = "/operations/get-statistic-ex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticsResponse)));
        }

        /// <summary>
        /// Peeks the values of specified statistics 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>Task of PeekedStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<PeekedStatisticsResponse> GetStatValuesAsync (Object statistics)
        {
             ApiResponse<PeekedStatisticsResponse> localVarResponse = await GetStatValuesAsyncWithHttpInfo(statistics);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Peeks the values of specified statistics 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statistics">A set of definitions for statistics to be peeked</param>
        /// <returns>Task of ApiResponse (PeekedStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PeekedStatisticsResponse>> GetStatValuesAsyncWithHttpInfo (Object statistics)
        {
            // verify the required parameter 'statistics' is set
            if (statistics == null)
                throw new ApiException(400, "Missing required parameter 'statistics' when calling StatisticsApi->GetStatValues");

            var localVarPath = "/operations/get-statistic-ex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statistics != null && statistics.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(statistics); // http body (model) parameter
            }
            else
            {
                localVarPostBody = statistics; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PeekedStatisticsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PeekedStatisticsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PeekedStatisticsResponse)));
        }

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>StatisticDataResponse</returns>
        public StatisticDataResponse PeekSubscriptionStats (string id, string statisticIds = null, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = PeekSubscriptionStatsWithHttpInfo(id, statisticIds, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>ApiResponse of StatisticDataResponse</returns>
        public ApiResponse< StatisticDataResponse > PeekSubscriptionStatsWithHttpInfo (string id, string statisticIds = null, string verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->PeekSubscriptionStats");

            var localVarPath = "/subscriptions/{id}/statistic-values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statisticIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticIds", statisticIds)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeekSubscriptionStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of StatisticDataResponse</returns>
        public async System.Threading.Tasks.Task<StatisticDataResponse> PeekSubscriptionStatsAsync (string id, string statisticIds = null, string verbose = null)
        {
             ApiResponse<StatisticDataResponse> localVarResponse = await PeekSubscriptionStatsAsyncWithHttpInfo(id, statisticIds, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Peeks the values of statistics opened inside the specified subscription 
        /// </summary>
        /// <exception cref="Genesys.Statistics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the subscription to peek</param>
        /// <param name="statisticIds">The ids of the statistics to peek (optional)</param>
        /// <param name="verbose">Verbose level for response (optional, default to INFO)</param>
        /// <returns>Task of ApiResponse (StatisticDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatisticDataResponse>> PeekSubscriptionStatsAsyncWithHttpInfo (string id, string statisticIds = null, string verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StatisticsApi->PeekSubscriptionStats");

            var localVarPath = "/subscriptions/{id}/statistic-values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statisticIds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "statisticIds", statisticIds)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PeekSubscriptionStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatisticDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatisticDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatisticDataResponse)));
        }

    }
}
